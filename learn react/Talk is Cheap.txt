Planning is required before making an app

Low level planning

Header
 - Logo
 - Nav Items
Body
  - Search 
  - Restaurant Container
    - Restaurant Card 
Footer
  - Copyright
  - Links
  - Address
  - Contact 


We give inline-css as object
const styleCard = {
  backgroundColor: "pink",
};

Passing a prop to a component is same as passing arguement to a function

Config Driven UI - Our website is driven by data or configs. Controlling UI using data/config which comes from backend.
This is used in many big companys like Amazon

join() - The join() method of Array instances creates and returns a new string by concatenating all of the elements in this array, separated by commas or a specified separator string. 

const fruits = ["Banana", "Orange", "Apple", "Mango"];
let text = fruits.join(" and ");

Here we passed "and" as a sperator

?. (Optional Chaining) - The ?. is called Elvis Operator (optional chaining) in JavaScript. It is basically used while accessing some property on an object to avoid null or undefined errors.

suppose you have one object emp whose value you are getting from the server. But there may be chance when you are accessing the object values the response from server might not has come yet.

So in that case it will throw error saying can not find .property_name of null.

So if you use ?. then what it does is, it first check whether the object is null/undefined/ has value, if object is null/undefined then it doesn’t perform the .property_name on it.

map() - Give unique key in list

-> Why we need keys ?
   Let us suppose one Restaurant Card comes at first place without id React won't know where it came from , so React will re-render 
   all cards. Performance takes hit if we don't write key. React doesn't recommend index as keys

-> Why ES6 mandatory for React?
   ES6 is the standardization of javascript for making code more readable and more accessible

-> What is <React.Fragment> and <></> ?
   React Fragment is a feature in React that allows you to return multiple elements from a React component by allowing you to group
   a list of children without adding extra nodes to the DOM.

-> What is a Virtual DOM?
   The virtual DOM is only a virtual representation of the DOM. Everytime the state of our application changes, the virtual DOM gets
   updated instead of Real DOM.

-> How is Virtual DOM faster?
   When new elements are added to the UI, a virtual DOM, which is represented as a tree is created. Each element is a node on this 
   tree. The state of any of these elements changes, a new virtual DOM tree is created. This tree is then compared or “diffed” with the 
   previous virtual DOM tree.

   Once this is done, the virtual DOM calculates the best possible method to make these changes to the real DOM. This ensures that there   
   are minimal operations on the real DOM. Hence, reducing the performance cost of updating the real DOM.
                                                                                     
-> What is React Reconciliation ?
   React Reconciliation is the process through which React updates the Browser DOM. The process mentioned just above

-> What is React Fiber ?
   Introduced from React 16, Fiber Reconciler is the new reconciliation algorithm in React. The term Fiber refers to React's data  
   structure (or) architecture, and originates from 'fiber' - a representation of a node of the DOM tree.
