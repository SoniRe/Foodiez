Higher Order Component - Function that takes a component as an input and returns a component. 
Example we can add Promoted Label with Normal Restaurant Card using Higher Order Function

const RestaurantDiscountedCard = withDiscountLabel(RestaurantCard);

export const withDiscountLabel = (RestaurantCard) => {
  return (props) => {
    return (
      <div>
        <label>Discount Available</label>
        <RestaurantCard {...props} />
      </div>
    );
  };
};

Controlled and Uncontrolled Component 

Controlled Component meaning the component is controlled by another component like by parent
Uncontrolled Component meaning the component isn't being fully controlled by another component

 - Can we modify parent state variable from children component
   Not directly but possible indirectly

Lifting State Up - we lift the state up to a parent component

Props Drilling - Prop drilling is basically a situation when the same data is being sent at almost every level due to requirements in the final level.

React Context - It helps to keep data in central place and it can be accessed from anywhere 
which solve problem of props drilling.

Can access Context using Hooks or Context.Consumer

Wrap the whole App in User Context Provider to update context values

<UserContext.Provider value={{loggedInUsr: userName}}>
</ UserContext.Provider >

In class we can access using Component and get values in callback function inside UserContext.Consumer

<UserContext.Consumer>
{ ({loggedInUser}) => {return <h1>Default user is {loggedInUser}</h1>} }
</ UserContext.Consumer>

 - if you don't pass a value to context provider does it take default value ?
   Yes, if you don't pass a value to a context provider, it will take the default value that you specified when you created the context.


